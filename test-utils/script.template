#!/bin/bash
EXEC_FILE="%exec_file%"
EXEC_NAME="%exec_name%"
EXEC_OPTS="%exec_opts%"
GDB_OPTS="%gdb_opts%"
RUN_DIR="%run_dir%"
RUN_ID="%run_id%"

GDB_EXEC=%gdb_exec%
GDB=%gdb%
VALGRIND=%valgrind%
VALGRIND_OPTS=%valgrind_opts%
LOCAL=%local%
PAUSE_AFTER=%pause_after%
VERBOSE=%verbose%
XTERM=%xterm%

%exec_env%

function dbg {
    if [ $VERBOSE = 1 ]; then
	echo $*
    fi
}

ulimit -c unlimited
cd $RUN_DIR

#
# Generate the valgrind suppressions
#
cat > oasys_valgrind.supp <<EOF
{
   Berkeley DB Uninitialized Jump
   Memcheck:Cond
   obj:/usr/lib/libdb-4.3.so
   fun:__log_put
   fun:__bam_split_log
   obj:/usr/lib/libdb-4.3.so
   fun:__bam_split
   obj:/usr/lib/libdb-4.3.so
   fun:__db_c_put
   fun:__db_put
   fun:__db_put_pp
   fun:_ZN5oasys15BerkeleyDBTable3putERKNS_18SerializableObjectEjPS2_i
}
{
   Berkeley DB Uninitialized Write
   Memcheck:Param
   write(buf)
   obj:/lib/tls/libpthread-0.60.so
   obj:/usr/lib/libdb-4.3.so
   fun:__log_flush_int
   obj:/usr/lib/libdb-4.3.so
   fun:__log_put
   fun:__txn_regop_log
   fun:__txn_commit
   obj:/usr/lib/libdb-4.3.so
   fun:__db_txn_auto_resolve
   fun:__db_put_pp
   fun:_ZN5oasys15BerkeleyDBTable3putERKNS_18SerializableObjectEjPS2_i
}
{
   Berkeley DB Uninitialized Write (on Close)
   Memcheck:Param
   pwrite64(buf)
   fun:pwrite64
   fun:__os_io
   obj:/usr/lib/libdb-4.3.so
   fun:__memp_bhwrite
   fun:__memp_sync_int
   fun:__memp_fsync
   fun:__db_sync
   fun:__db_refresh
   fun:__db_close
   fun:__db_close_pp
   fun:_ZN5oasys15BerkeleyDBTableD0Ev
}
{
   TclReadline Leak
   Memcheck:Leak
   fun:realloc
   fun:_nc_doalloc
   obj:/lib/libncurses.so.5.4
   fun:tparm
   obj:/lib/libncurses.so.5.4
   fun:tgetent
   fun:_rl_init_terminal_io
   obj:/lib/libreadline.so.4.3
   fun:rl_initialize
   obj:/lib/libreadline.so.4.3
   obj:/usr/lib/tclreadline1.2/libtclreadline1.2.so.1
   fun:TclInvokeStringCommand
}
{
   TclReadline Leak 2
   Memcheck:Leak
   fun:malloc
   fun:_nc_home_terminfo
   fun:_nc_read_entry
   obj:/lib/libncurses.so.5.4
   fun:setupterm
   fun:tgetent
   fun:_rl_init_terminal_io
   obj:/lib/libreadline.so.4.3
   fun:rl_initialize
   obj:/lib/libreadline.so.4.3
   obj:/usr/lib/tclreadline1.2/libtclreadline1.2.so.1
   fun:TclInvokeStringCommand
}
{
   TclReadline Leak 3
   Memcheck:Leak
   fun:malloc
   obj:/lib/libreadline.so.4.3
   fun:xmalloc
   fun:sh_set_lines_and_columns
   fun:_rl_get_screen_size
   fun:_rl_init_terminal_io
   fun:rl_initialize
}
{
   Tcl dlopen leak
   Memcheck:Leak
   fun:calloc
   obj:/lib/tls/libdl-2.3.2.so
   fun:dlopen
   fun:TclpDlopen
   fun:Tcl_FSLoadFile
   fun:Tcl_LoadObjCmd
   fun:TclEvalObjvInternal
   obj:/usr/lib/libtcl8.4.so.0
   fun:TclCompEvalObj
   fun:Tcl_EvalObjEx
   fun:Tcl_CatchObjCmd
   fun:TclEvalObjvInternal
}
{
   Tcl Init Leak 1
   Memcheck:Leak
   fun:calloc
   obj:/lib/ld-2.3.2.so
   fun:_dl_allocate_tls
   fun:allocate_stack
   fun:pthread_create@@GLIBC_2.1
   fun:TclpThreadCreate
   fun:Tcl_InitNotifier
   fun:TclInitNotifier
   fun:TclInitSubsystems
   fun:Tcl_CreateInterp
   fun:_ZN5oasys16TclCommandInterp7do_initEPcb
   fun:_ZN5oasys16TclCommandInterp4initEPcb
}
{
   Tcl Init Leak 2
   Memcheck:Leak
   fun:calloc
   obj:/usr/lib/libtcl8.4.so.0
   fun:TclpAlloc
   fun:Tcl_Alloc
   fun:Tcl_MutexLock
   fun:TclInitObjSubsystem
   fun:TclInitSubsystems
   fun:Tcl_CreateInterp
   fun:_ZN5oasys16TclCommandInterp7do_initEPcb
   fun:_ZN5oasys16TclCommandInterp4initEPcb
}
{
   Tcl Init Leak 3
   Memcheck:Leak
   fun:malloc
   fun:TclpNewAllocMutex
   obj:/usr/lib/libtcl8.4.so.0
   fun:TclpAlloc
   fun:Tcl_Alloc
   fun:Tcl_MutexLock
   fun:TclInitObjSubsystem
   fun:TclInitSubsystems
   fun:Tcl_CreateInterp
   fun:_ZN5oasys16TclCommandInterp7do_initEPcb
   fun:_ZN5oasys16TclCommandInterp4initEPcb
}
{
   Tcl Init Leak 4
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib/libtcl8.4.so.0
   fun:TclpAlloc
   fun:Tcl_Alloc
   fun:Tcl_MutexLock
   fun:TclInitObjSubsystem
   fun:TclInitSubsystems
   fun:Tcl_CreateInterp
   fun:_ZN5oasys16TclCommandInterp7do_initEPcb
   fun:_ZN5oasys16TclCommandInterp4initEPcb
}

EOF

VALGRIND_OPTS="--tool=memcheck -v --num-callers=16 \
               --leak-check=yes --leak-resolution=high --show-reachable=no \
               --suppressions=oasys_valgrind.supp \
               $VALGRIND_OPTS"

if [ $VALGRIND = 1 ] ; then
    export GLIBCXX_FORCE_NEW=1
    export GLIBCPP_FORCE_NEW=1
fi

if [ ${EXEC_FILE:0:1} = '/' ] ; then
    EXEC_PATH=$EXEC_FILE
else
    EXEC_PATH=$RUN_DIR/$EXEC_NAME
fi

CHOICE="${XTERM} ${GDB} ${VALGRIND}"
case $CHOICE in
    "1 1 0")
	CMD="$GDB_EXEC $EXEC_PATH -x run-$EXEC_NAME.gdb"
	IN="</dev/stdin"
	OUT="2>&1 | tee -a $EXEC_NAME.out"
	;;
    "1 0 1")
	CMD="valgrind $VALGRIND_OPTS $EXEC_PATH $EXEC_OPTS"
	IN="</dev/stdin"
	OUT="2>&1 | tee -a $EXEC_NAME.out"
	;;
    "1 0 0") 
	CMD="$EXEC_PATH $EXEC_OPTS"
	IN="</dev/stdin"
	OUT="2>&1 | tee -a $EXEC_NAME.out"
	;;
    "0 1 0")
	CMD="$GDB_EXEC -batch -x run-test.gdb $GDB_OPTS $EXEC_PATH"
	IN=""
	OUT=">>$RUN_DIR/$EXEC_NAME.out 2>&1"
	;;
    "0 0 1")
	CMD="valgrind $VALGRIND_OPTS $EXEC_PATH $EXEC_OPTS"
	IN=""
	OUT=">>$RUN_DIR/$EXEC_NAME.out 2>&1"
	;;
    "0 0 0")
	CMD="$EXEC_PATH $EXEC_OPTS"
	IN=""
	OUT=">>$RUN_DIR/$EXEC_NAME.out 2>&1"
	;;
    *) echo "! garbage arguments to run script"; exit ;;
esac

EXECCMD="( $CMD $IN & echo \$! > $RUN_DIR/$EXEC_NAME.pid ) $OUT"
dbg "% $EXECCMD"

if [ \( "$XTERM" = 1 \) -a \( "$PAUSE_AFTER" = 1 \) ]; then
    eval $EXECCMD
    echo
    read -s -n1 -p "== Hit any key to close xterm ==" keypress
else
    eval $EXECCMD
fi
