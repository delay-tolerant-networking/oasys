dnl
dnl Figure out which version of gcc/g++ to use.
dnl

AC_DEFUN(AC_OASYS_CONFIG_GCC, [
    AC_CACHE_CHECK(for the version of the gcc compiler, oasys_cv_prog_gccver, [
      oasys_cv_prog_gccver=`$CC --version | head -1`
      oasys_cv_prog_gccver=`echo $oasys_cv_prog_gccver | sed 's/gcc.*(GCC) //'`
      oasys_cv_prog_gccver=`echo $oasys_cv_prog_gccver | sed 's/ .*//'`
    ])      

    # 
    # Set version-specific compiler options
    #
    case "$oasys_cv_prog_gccver" in
        #
        # for gcc 2.9.X and 3.1, the auto-dependency features don't work, and 
        # _GNU_SOURCE isn't defined, so do both those things here
        #
        3.1*|2.9*)
            OASYS_CPPFLAGS="$OASYS_CPPFLAGS -D_GNU_SOURCE"
	    DEPFLAGS=""
            echo "*** "
	    echo "*** warning: using old compiler $cc version $oasys_cv_prog_gccver,"
	    echo "***          automatic dependency generation will not work"
            echo "*** "
	    ;;
	#
	# For 3.2 and beyond, use auto-dependency flags. 
	# Note that for m4 to output a '$' requires the '@S|@' heinosity below.
	#
	3.*)
	    DEPFLAGS=['-MMD -MP -MT "@S|@*.o @S|@*.E @S|@*.po"']
	    ;;
	#
	# Otherwise bail
	#
        *)
	    echo "error: unsupported compiler version $oasys_cv_prog_gccver"
	    exit  1
	    ;;
    esac

    AC_CACHE_CHECK([whether gcc accepts -Wno-long-double (Apple OSX only)],
	           oasys_cv_prog_gcc_w_no_long_double, [
        CPPFLAGS_save=$CPPFLAGS
        CPPFLAGS="$CPPFLAGS -Wno-long-double"
	AC_LINK_IFELSE(
	  AC_LANG_PROGRAM(
	    [],
            [/* nothing */]
	  ),
          [ 
              oasys_cv_prog_gcc_w_no_long_double=yes
          ],
          [
              oasys_cv_prog_gcc_w_no_long_double=no
          ])
        CPPFLAGS=$CPPFLAGS_save
    ])

    if test $oasys_cv_prog_gcc_w_no_long_double = yes ; then
        OASYS_CPPFLAGS="$OASYS_CPPFLAGS -Wno-long-double"
    fi
    
    AC_CACHE_CHECK([whether std::string::reserve() is broken],
                   oasys_cv_prog_gcc_string_broken, [	
        AC_LANG_PUSH(C++)
        AC_RUN_IFELSE(
	  AC_LANG_PROGRAM(
	    [
               #include <string>
            ],
            [
                std::string s;
                s.reserve(1);
                try {
                    s.replace(0, 1, "X", 1);
                } catch(...) {
                    exit(1);
                }
                exit(0);
            ]
	  ),
          [ 
              oasys_cv_prog_gcc_string_broken=no
          ],
          [
              oasys_cv_prog_gcc_string_broken=yes
          ],
          [
              oasys_cv_prog_gcc_string_broken=maybe
          ]
        )
        AC_LANG_POP(C++)
    ])

    if test $oasys_cv_prog_gcc_string_broken = yes ; then
        AC_MSG_ERROR([broken std::string::reserve() -- upgrade your compiler])
    fi

    AC_SUBST(DEPFLAGS)
])

AC_DEFUN(AC_OASYS_FIX_APPLE_DEBUG_H, [
   AC_MSG_CHECKING([whether a conflicting debug/debug.h exists (Apple OSX only)])
   if test `uname` = 'Darwin' ; then
   AC_LANG_PUSH(C++)
       AC_LINK_IFELSE(
       AC_LANG_PROGRAM([#include <debug/Debug.h>], []),
       [
           AC_MSG_RESULT(yes)
	   echo "***"
	   echo "*** The C++ compiler installation on this host contains a file"
	   echo "*** debug/debug.h which, when included by the preprocessor,"
	   echo "*** conflicts with debug/Debug.h from the oasys source."
	   echo "***"
	   echo "*** To fix the problem, this configure script can rename the"
	   echo "*** file debug.h to apple-debug.h, and will change all"
	   echo "*** #include references using the script fix-apple-debug-header.sh."
	   echo "***"
	   echo $ECHO_N "*** Should this script run 'sudo sh fix-apple-debug-header.sh'... [[no]] $ECHO_C"
	   read response
	   if test x$response = x'yes' -o x$response = x'y' ; then
	       echo "*** Running sudo sh fix-apple-debug-header.sh..."
	       sudo sh fix-apple-debug-header.sh
	       if test ! $? = 0 ; then
	           AC_MSG_ERROR(running fix-apple-debug-header.sh. must reconcile manually)
	       fi
           else
	       AC_MSG_ERROR(conflict in debug/debug.h exists. must reconcile manually)
           fi
       ],
       [
	   AC_MSG_RESULT(no)
       ]
       AC_LANG_POP(C++)
   )
   else
      AC_MSG_RESULT(no check needed)
   fi
])
