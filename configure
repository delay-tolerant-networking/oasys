#!/bin/sh
#

#
# Before anything else, check for configure --verbose
#
for ac_option do
   case "$ac_option" in
   -verbose | --verbose | -v)
      set -x
      break
      ;;
   esac
done

#
# Figure out srcdir based on the path to the configure script
#
confscript=$0
srcdir=`echo "$confscript" | sed 's%[\\/][^\\/][^\\/]*$%%'`
if test "$srcdir" = "$confscript" ; then
   srcdir=.
fi

if ! test -r "$srcdir/Rules.make.in" ; then
   echo "Can't find Rules.make.in in srcdir $srcdir"
   exit 1
fi

if ! test "$srcdir" = "." ; then
   echo "XXX/demmer support non-local srcdir"
   exit 1
fi

#
# Defaults
#
platform=''
cc='gcc'
ccver='auto'
depflags=''
make_static='y'
debug='-g'
# optimize='-O'
# optimizewarn='-Wuninitialized' # depends on -O
optimize=''
optimizewarn=''
target='native'

#
# External libraries
#
pthreadincdir=''
pthreadlibdir=''
pthreadlib='-lpthread'
pthreadstaticlib=''
pthreadflag=''			# for FreeBSD, gcc needs -pthread

tclver='8.3'
tcldir='system'
tclincdir=''
tcllibdir=''
tcllib=''

#
# Parse user options
#
ac_prev=
for ac_option
do
  if  test -n "$ac_prev"; then
      eval "$ac_prev=\$ac_option"
      ac_prev=
      continue
  fi

  case "$ac_option" in
  -*=*) ac_optarg=`echo "$ac_option" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *) ac_optarg= ;;
  esac

  case "$ac_option" in
  -verbose | --verbose | -v)
     ;;
  -target | --target | -t)
    ac_prev=target ;;
  -target=* | --target=* | -t=*)
    target="$ac_optarg" ;;

  -static | --static)
    make_static=y ;;
  -dynamic | --dynamic)
    make_static=n ;;

  -enable-debug | --enable-debug)
    debug='-g' ;;
  -disable-debug | --disable-debug)
    debug='' ;;

  -enable-optimize | --enable-optimize)
    optimize='-O'
    optimizewarn='-Wuninitialized'
    ;;
  -disable-optimize | --disable-optimize)
    optimize='' 
    optimizewarn=''
    ;;

  -with-gcc | --with-gcc | -with-cc | --with-cc)
    ac_prev=with-cc ;;
  -with-gcc=* | --with-gcc=* | -with-cc=* | --with-cc=*)
    cc="$ac_optarg" ;;

  -with-gccver | --with-gccver | -with-ccver | --with-ccver)
    ac_prev=with-cc ;;
  -with-gccver=* | --with-gccver=* | -with-ccver=* | --with-ccver=*)
    ccver="$ac_optarg" ;;

  -with-tcl | --with-tcl)
    ac_prev=with-tcl ;;
  -with-tcl=* | --with-tcl=*)
    tcldir="$ac_optarg" ;;

  -with-tclver | --with-tclver)
    ac_prev=with-tclver ;;
  -with-tclver=* | --with-tclver=*)
    tclver="$ac_optarg" ;;

  --target=*)
    target="$ac_optarg";;

  -help | --help | -h)
    cat <<EOF
Usage: configure [options]
Options [defaults in brackets after descriptions]
Directory and file names:
  --target=TARGET                 Configure for TARGET.  Valid targets are 'native'
                                  and 'arm' [$target]
  --static                        Build static objects and libraries (default)
  --dynamic                       Build using dynamic link libraries
Features
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-debug         compile with debugging turned off
  --disable-optimize      compile with optimization turned off
Packages
  --with-cc=GCC           Location of the C/C++ compiler to use
  --with-ccver=VER        Version of the C/C++ compiler to use
  --with-tcl=DIR          Location of the tcl installation [$tcldir]
  --with-tclver=VERSION   Version of tcl to use [$tclver]

  (set DIR=none   to disable the option)
  (set DIR=system to search default locations)
EOF
  exit 0
  ;;
  *)
    cat <<EOF
configure: unrecognized option by oasys \`$ac_option'.  Ignoring !!
EOF
#  exit 1
#  Try \`configure --help' for more information.
# Commented by Sushant, to address incompatibility between configure options for DTN2 configure and this.
  ;;
  esac
done

#
# Get build platform (either linux or freebsd)
#
platform=`uname`
legal=
for legal_platform in Linux FreeBSD ; do
    if [ $platform = $legal_platform ] ; then
	legal=1
    fi
done
if [ -z "$legal" ] ; then
    echo "error: building oasys on unsupported platform $platform"
    exit 1
fi


if [ $target = "native" ]; then

#
# Make sure the compiler a) works b) is some gcc variant and c) is an
# acceptable version.
#
if [ $ccver = "auto" ]; then

cat > config.$$.c <<EOF
#include <stdio.h>
int 
main(int argc, const char** argv) {
    printf("%d.%d", __GNUC__, __GNUC_MINOR__);
}
EOF
$cc config.$$.c > /dev/null 2> /dev/null
if [ $? != 0 -o ! -f ./a.out ]; then
    echo "error: non-functional or non-gnu compiler $cc"
    exit 1
fi

rm -f config.$$.c

ccver=`./a.out`
rm -f ./a.out

fi

elif [ "$target" = "arm" ]; then
ccver=2.95
mysql_enabled=0
postgres_enabled=0
fi

#
# Now set some options based on the compiler version
#
case "$ccver" in
    #
    # for gcc 2.9.X and 3.1, the auto-dependency features don't work, and 
    # _GNU_SOURCE isn't defined, so do both those things here
    #
    3.1|2.9*)
        defs="$defs -D_GNU_SOURCE"
	depflags=''
	echo "*** warning: using old compiler $cc version $ccver,"
	echo "             automatic dependency generation will not work"
	;;
    #
    # For later 3.X, use auto-dependency flags
    #
    3.*)
	depflags='-MMD -MP -MT "$*.o $*.E $*.po"'
	;;
    *)
	echo "error: unsupported compiler version $ccver"
	exit 1
	;;
esac

#
# Assume that if we're using gcc-xxx, we also want g++-xxx
#
cpp=`echo $cc | sed 's/cc/++/'`

#
# Set options to build statically
#
case "$make_static" in
    yes | y | true | t)
    ;;

    *)
    echo "dynamic library build not supported in this release"
    exit 1
    ;;
esac

#
# Set platform-specific options for library extensions
#
libext=a
shlibext=so

#
# Find the tcl library
#
if [ ! "$tcldir" = "system" ]; then
  #
  # Make sure the directory the user specified is ok
  #
  if [ -r $tcldir/include/tcl.h ]; then
	tclincdir=-I$tcldir/include
  else
	echo "can't find tcl.h in $tcldir"
	exit 1
  fi

  if   [ -r $tcldir/lib/libtcl.$libext -o \
	 -r $tcldir/lib/libtcl.$shlibext ] ; then
	tcllibdir=-L$tcldir/lib
	tcllib=-ltcl

  elif [ -r $tcldir/lib/libtcl$tclver.$libext -o \
	 -r $tcldir/lib/libtcl$tclver.$shlibext ]; then
	tcllibdir=-L$tcldir/lib
	tcllib=-ltcl$tclver

  else
	echo "can't find libtcl.$libext or libtcl$tclver.$libext in $tcldir"
	exit 1
  fi

else
  #
  # Try to find a system installation
  #
  if [ -r /usr/include/tcl.h ]; then
	tclincdir=

  elif [ -r /usr/include/tcl$tclver/tcl.h ]; then
	tclincdir=-I/usr/include/tcl$tclver

  else
	echo "can't find usable tcl.h"
	exit 1
  fi

  if   [ -r /usr/lib/libtcl.$libext -o \
	 -r /usr/lib/libtcl.$shlibext ]; then
	tcllib=-ltcl

  elif [ -r /usr/lib/libtcl$tclver.$libext -o \
	 -r /usr/lib/libtcl$tclver.$shlibext ]; then
	tcllib=-ltcl$tclver

  else
	echo "can't find usable libtcl.$libext"
	exit 1
  fi
fi

#
# Cons together the various directories.
#
# i.e: incdir="$tclincdir $pthreadincdir..."
#      libdir="$tcllibdir $pthreadlibdir..."
#
#
for what in incdir libdir lib staticlib ;  do
  cmd="$what"s=\"
  for lib in pthread tcl ; do
	cmd=$cmd\$"$lib$what "
  done
  cmd=$cmd\"
  eval $cmd
done

#
# Spit out some output and then do the correct substitution on Rules.make
#
echo "oasys configure state:"
echo "Platform:"
echo "  OS: $platform"
echo "  target: $target"
echo "Target/Tools:"
echo "  SRCDIR: $srcdir"
echo "  CC: $cc"
echo "  CPP: $cpp"
echo "  CCVER: $ccver"
echo " "
echo "Options:"
echo "  Debug: $debug"
echo "  Optimize: $optimize"
echo "  Static: $make_static"
echo " "
echo " "

rm -f Rules.make
echo > Rules.make <<EOF
#
# This file was automatically generated by configure.
#
#                     !!! DO NOT EDIT !!!
#
#
EOF

sed -e "
s%@SRCDIR@%$srcdir%g
s%@CFLAGS@%$cflags%g
s%@STATIC@%$static%g
s%@CC@%$cc%g
s%@CPP@%$cpp%g
s%@DEPFLAGS@%$depflags%g
s%@DEBUG@%$debug%g
s%@OPTIMIZE@%$optimize%g
s%@OPTIMIZE_WARN@%$optimizewarn%g
s%@INCDIRS@%$incdirs%g
s%@LIBDIRS@%$libdirs%g
s%@LIBS@%$libs%g
s%@STATIC_LIBS@%$staticlibs%g
s%@PTHREAD_FLAG@%$pthreadflag%g
s%@TARGET@%$target%g

" $srcdir/Rules.make.in >> Rules.make
chmod oag-w Rules.make

echo ""
echo "wrote Rules.make; now run make"
